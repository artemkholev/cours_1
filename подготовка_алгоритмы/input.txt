36 35
45 27
17 10
97 38
12 34
88 20
89 22
82 31
64 39
25 19
19 22
67 18
65 42
9 32
89 34
28 22
31 0
37 21
28 17
4 27
32 24
38 45
53 11
84 25
14 10
84 1
25 49
20 19
14 0
97 24
43 10
72 27
29 8
52 36
57 26
53 5
75 4
36 45
12 2
10 42
13 48
66 33
46 9
64 31
90 9
77 4
24 1
17 21
49 42
73 7
95 19
44 20
46 0
82 31
26 3
79 2

#include <iostream>
#include <stdlib.h>
#include <stack>
#include <vector>
#include <fstream>
using namespace std;
  
struct point{
    int x, y;
};
point point_one;
int sort(const void *one, const void *two);
int sort2(const void *one, const void *two);
int dist(point point_1, point point_2);
void swap_point(point &point_1, point &point_2);
point last(stack<point> &stack_point);
int pos_two_point(point point_1, point point_2, point point_3);
void basic(vector<point> xy, int n);
  
int main(){
    int i = 0;
    ifstream ind("input.txt");
    vector<point> points_xy;
    while (!ind.eof()){
        points_xy.push_back(point());
        ind >> points_xy[i].x >> points_xy[i].y;
        i++;
    }
    ind.close();
    cout << "Convex Hull is:" << endl;
    basic(points_xy, i - 1);
    return 0;
}

void basic(vector<point> xy, int n){
    stack<point> stack;
    int min_meaning = xy[0].y, pos_min = 0;
    int p = 1; 
    for (int i = 1; i < n; ++i){
        if ((xy[i].y < min_meaning)){
            pos_min = i;
            min_meaning = xy[i].y;
        }
        else if (((xy[pos_min].x > xy[i].x) && min_meaning == xy[i].y)){
            pos_min = i;
            min_meaning = xy[i].y;
        }
    }
    swap_point(xy[0], xy[pos_min]);

    point_one = xy[0];
    qsort(&xy[1], n - 1, sizeof(point), sort);
    for (int i = 1; i < n; ++i){
        while (pos_two_point(point_one, xy[i], xy[i+1]) == 0 && n-1 > i)
            ++i;
        xy[p] = xy[i];
        ++p;
    }
    for (int i = 0; i < 3; i++)
        stack.push(xy[i]);
    int pp = 3;
    for (int i = 3; i < p; i++){
        while ((stack.size() > 1) && pos_two_point(last(stack), stack.top(), xy[i]) != -1){
           stack.pop();
           pp--;
        }
        stack.push(xy[i]);
        pp++;
    }
    int start = 0;
    while (!stack.empty()){
        xy[start++] = stack.top();;
        stack.pop();
    }
    qsort(&xy[0], pp, sizeof(point), sort2);
    for (int i = 0; i < pp; i++)
        cout << xy[i].x << " " << xy[i].y << endl;
}

int dist(point point_1, point point_2){
    return (point_1.x - point_2.x)*(point_1.x - point_2.x) + (point_1.y - point_2.y)*(point_1.y - point_2.y);
}
void swap_point(point &point_1, point &point_2){
    point point_copy = point_1;
    point_1 = point_2;
    point_2 = point_copy;
} 
int pos_two_point(point point_1, point point_2, point point_3){
    int edge1 = (point_2.y - point_1.y) * (point_3.x - point_2.x);
    int edge2 = (point_2.x - point_1.x) * (point_3.y - point_2.y);
    int a = (edge1 - edge2);
    if (a > 0)
        return 1;
    else if (a == 0) 
        return 0; 
    else 
        return -1;
}
point last(stack<point> &stack_point){
    point point_last = stack_point.top();
    stack_point.pop();
    point last = stack_point.top();
    stack_point.push(point_last);
    return last;
}
int sort(const void *one, const void *two){
    int pos = 0;
    point *point_o = (point *)one;
    point *point_t = (point *)two;
    pos = pos_two_point(point_one, *point_o, *point_t);
    if (pos == 0){
        if(dist(point_one, *point_t) >= dist(point_one, *point_o))
            return -1;
        else 
            return 1;
    }
    if (pos == -1)
        return -1;
    else 
        return 1;
}
int sort2(const void *one, const void *two){
    point *point_o = (point *)one;
    point *point_t = (point *)two;
    if (point_o->y > point_t->y && point_o->x == point_t->x)
        return 1;
    else if (point_o->x > point_t->x)
        return 1;
    else 
        return -1;
}







#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main(){
  int n = 0, m = 0;
  int sum = 0;
  char p[10];
  cin >> n >> m;
  int c = 0, r = 0;
  vector<vector<int>> array(n, vector<int>(m, 0));
  for (int i = 0; i < n; i++){
    for (int j = 0; j < m; j++){
      cin >> p;
      if (p[0] == 'S'){
        array[i][j] = -100;
        c = i, r = j;
      }
      else
        array[i][j] = stoi(p);
    }
  }
  cout << "Path:\n" << "(" << c << "," << r <<") ";
  while (c + 1 < n || r + 1 < m){
    if (array[c][r + 1] >= array[c + 1][r] && r + 1 < m){
      r++;
      sum += array[c][r];
    }
    else if (c + 1 < n){
      c++;
      sum += array[c][r];
    }
    cout << "(" << c << "," << r <<") ";
  }
  cout << "\n" << "Coins: " << sum << endl;
  return 0;
}
